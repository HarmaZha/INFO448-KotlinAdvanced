/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package edu.uw.complexkotlin

// FIZZBUZZ lambda

val fizzbuzz: (IntRange) -> String = { range ->
  range.map { number ->
    when {
      number % 15 == 0 -> "FIZZBUZZ"
      // number % 7 == 0 -> "DOH!"
      number % 3 == 0 -> "FIZZ"
      number % 5 == 0 -> "BUZZ"
      else -> ""
    }
  }.joinToString("")
}


fun fizzbuzzgen(map: Map<Int, String>): (IntRange) -> String = { range ->
  range.map { number ->
    map.entries.fold("") { acc, (divisor, text) ->
      if (number % divisor == 0) {
        acc + text
      } else {
        acc
      }
    }.ifEmpty { "" }
  }.joinToString("")
}

// Use process
// This is a utility function for your use as you choose, and as an
// example of an extension method
fun Int.times(block: () -> Unit): Unit {
  for (it in 1..this) {
    block()
  }
}

// Use this function
fun process(message: String, block: (String) -> String): String {
  return ">>> ${message}: {" + block(message) + "}"
}


// Create r1 as a lambda that calls process() with message "FOO" and a block that returns "BAR"
val r1 = { process("FOO") { "BAR" } }

// Create r2 as a lambda that calls process() with message "FOO" and a block that upper-cases
// r2_message, and repeats it three times with no spaces: "WOOGAWOOGAWOOGA"
val r2_message = "wooga"
val r2 = { process("FOO") { r2_message.toUpperCase().repeat(3) } }




// Ho, Socrates!

enum class Philosopher {
  THINKING {
    override fun toString() = "Deep thoughts...."
    override fun signal() = TALKING
  },
  TALKING {
    override fun toString() = "Allow me to suggest an idea..."
    override fun signal() = THINKING
  };
  abstract fun signal(): Philosopher
}


// Command (object)!

class Command(private val prompt: String) {
  operator fun invoke(message: String): String {
    return "$prompt$message"
  }
}
